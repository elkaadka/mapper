<?php

namespace Kanel\Mapper\Tests;

use Kanel\Mapper\Exceptions\InvalidDataException;
use Kanel\Mapper\Exceptions\MapperNotFound;
use Kanel\Mapper\Mapper;
use Kanel\Mapper\Options;
use Kanel\Mapper\Tests\Fixtures\MyClassExample;
use Kanel\Mapper\Transformers\CamelCaseTransformer;
use Kanel\Mapper\Transformers\CustomTransformer;
use Kanel\Mapper\Transformers\PascalCaseTransformer;
use Kanel\Mapper\Transformers\SnakeCaseTransformer;
use PHPUnit\Framework\TestCase;

class MapperTest extends TestCase
{
    protected $mapper;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function testFailure()
    {
        $this->expectException(InvalidDataException::class);
        $mapper = new Mapper();
        $mapper->map(1, new MyClassExample());
    }

    public function testFailure2()
    {
        $this->expectException(InvalidDataException::class);
        $mapper = new Mapper();
        $mapper->map([1], 2);
    }

    public function testSimpleArrayArrayMap()
    {
        $mapper = new Mapper();
        $class =  new MyClassExample();
        $data = ['testOne' => 1, 'testTwo' => 2, 'testThree' => 3, 'testFour' => 4];

        $mapper->map($data, $class);
        $this->assertEquals($class->getTestOne(), 1);
        $this->assertEquals($class->getTestTwo(), 2);
        $this->assertEquals($class->getTestThree(), 3);
        $this->assertFalse(property_exists($class, 'testFour'));
    }

    public function testCamelCaseArrayMap()
    {
        $options = new Options();
        $options->setTransformer(new CamelCaseTransformer());
        $mapper = new Mapper($options);

        $class = new MyClassExample();
        $data = ['test_one' => 1, 'testTwo' => 2, 'TestThree' => 3];

        $mapper->map($data, $class);
        $this->assertEquals($class->getTestOne(), 1);
        $this->assertEquals($class->getTestTwo(), 2);
        $this->assertEquals($class->getTestThree(), 3);
    }

    public function testCamelCaseArrayMapForOneProperty()
    {
        $options = new Options();
        $options->addPropertyTransformer('test_one', new CamelCaseTransformer());
        $mapper = new Mapper($options);

        $class = new MyClassExample();
        $data = ['test_one' => 1, 'testTwo' => 2, 'test_three' => 3];

        $mapper->map($data, $class);
        $this->assertEquals($class->getTestOne(), 1);
        $this->assertEquals($class->getTestTwo(), 2);
        $this->assertNull($class->getTestThree());
    }

    public function testPascalCaseArrayMap()
    {

        $options = new Options();
        $options->setTransformer(new PascalCaseTransformer());
        $mapper = new Mapper($options);

        $class = new MyClassExample();
        $data = ['test_four' => 1, 'testFive' => 2, 'TestSix' => 3];
        $mapper->map($data, $class);

        $this->assertEquals($class->getTestFour(), 1);
        $this->assertEquals($class->getTestFive(), 2);
        $this->assertEquals($class->getTestSix(), 3);
    }

    public function testSnakeCaseArrayMap()
    {
        $options = new Options();
        $options->setTransformer(new SnakeCaseTransformer());
        $mapper = new Mapper($options);

        $class =  new MyClassExample();
        $data = ['testSeven' => 1, 'test_eight' => 2, 'TestNine' => 3];
        $mapper->map($data, $class);

        $this->assertEquals($class->getTestSeven(), 1);
        $this->assertEquals($class->getTestEight(), 2);
        $this->assertEquals($class->getTestNine(), 3);
    }

    public function testCustomArrayMap()
    {
        $customTransformer = new CustomTransformer();
        $customTransformer->setTransformer(function($property) {
            switch ($property) {
                case 'testOne' : return 'test_seven';
                case 'testTwo' : return 'test_eight';
                case 'testThree': return 'test_nine';
            }
        });
        $options = new Options();
        $options->setTransformer($customTransformer);
        $mapper = new Mapper($options);

        $class =  new MyClassExample();
        $data = ['testOne' => 1, 'testTwo' => 2, 'testThree' => 3];
        $mapper->map($data, $class);

        $this->assertEquals($class->getTestOne(), null);
        $this->assertEquals($class->getTestTwo(), null);
        $this->assertEquals($class->getTestThree(), null);

        $this->assertEquals($class->getTestSeven(), 1);
        $this->assertEquals($class->getTestEight(), 2);
        $this->assertEquals($class->getTestNine(), 3);
    }

    public function testCreateProperty()
    {
        $options = new Options();
        $options->createNewProperty(true);
        $mapper = new Mapper($options);

        $class =  new MyClassExample();
        $data = ['testOne' => 1, 'testTwo' => 2, 'testNew' => 3];
        $mapper->map($data, $class);

        $this->assertEquals($class->getTestOne(), 1);
        $this->assertEquals($class->getTestTwo(), 2);
        $this->assertEquals($class->testNew, 3);
    }

    public function testSimpleObjectMap()
    {
        $mapper = new Mapper();
        $class =  new MyClassExample();
        $data = ['testOne' => 1, 'testTwo' => 2, 'testThree' => 3, 'testFour' => 4];

        $mapper->map((object)$data, $class);
        $this->assertEquals($class->getTestOne(), 1);
        $this->assertEquals($class->getTestTwo(), 2);
        $this->assertEquals($class->getTestThree(), 3);
        $this->assertFalse(property_exists($class, 'testFour'));

        $mapper = new Mapper();
        $classFrom =  new MyClassExample();
        $classTo = new MyClassExample();
        $classFrom->setTestOne(1);
        $classFrom->setTestTwo(2);
        $classFrom->setTestThree(3);

        $mapper->map($classFrom, $classTo);
        $this->assertEquals($class->getTestOne(), 1);
        $this->assertEquals($class->getTestTwo(), 2);
        $this->assertEquals($class->getTestThree(), 3);
    }

    public function testCamelCaseObjectMap()
    {
        $options = new Options();
        $options->setTransformer(new CamelCaseTransformer());

        $mapper = new Mapper($options);
        $class = new MyClassExample();
        $data = ['test_seven' => 1, 'test_eight' => 2, 'test_nine' => 3];

        $mapper->map((object)$data, $class);
        $this->assertEquals($class->getTestSevenCamelCase(), 1);
        $this->assertEquals($class->getTestEightCamelCase(), 2);
        $this->assertEquals($class->getTestNineCamelCase(), 3);

        $mapper = new Mapper($options);
        $classFrom =  new MyClassExample();
        $classTo = new MyClassExample();
        $classFrom->setTestSeven(1);
        $classFrom->setTestEight(2);
        $classFrom->setTestNine(3);

        $mapper->map($classFrom, $classTo);
        $this->assertEquals($class->getTestSevenCamelCase(), 1);
        $this->assertEquals($class->getTestEightCamelCase(), 2);
        $this->assertEquals($class->getTestNineCamelCase(), 3);


    }

    public function testPascalCaseObjectMap()
    {

        $options = new Options();
        $options->setTransformer(new PascalCaseTransformer());
        $mapper = new Mapper($options);

        $class = new MyClassExample();
        $data = ['test_seven' => 1, 'testEight' => 2, 'TestNine' => 3];
        $mapper->map((object)$data, $class);

        $this->assertEquals($class->getTestSevenPascalCase(), 1);
        $this->assertEquals($class->getTestEightPascalCase(), 2);
        $this->assertEquals($class->getTestNinePascalCase(), 3);

        $mapper = new Mapper($options);
        $classFrom =  new MyClassExample();
        $classTo = new MyClassExample();
        $classFrom->setTestSeven(1);
        $classFrom->setTestEight(2);
        $classFrom->setTestNine(3);

        $mapper->map($classFrom, $classTo);
        $this->assertEquals($class->getTestSevenPascalCase(), 1);
        $this->assertEquals($class->getTestEightPascalCase(), 2);
        $this->assertEquals($class->getTestNinePascalCase(), 3);
    }

    public function testSnakeCaseObjectMap()
    {
        $options = new Options();
        $options->setTransformer(new SnakeCaseTransformer());
        $mapper = new Mapper($options);

        $class =  new MyClassExample();
        $data = ['testSeven' => 1, 'testEight' => 2, 'TestNine' => 3];
        $mapper->map((object)$data, $class);

        $this->assertEquals($class->getTestSeven(), 1);
        $this->assertEquals($class->getTestEight(), 2);
        $this->assertEquals($class->getTestNine(), 3);

        $mapper = new Mapper($options);
        $classFrom =  new MyClassExample();
        $classTo = new MyClassExample();
        $classFrom->setTestSevenCamelCase(1);
        $classFrom->setTestEightPascalCase(2);
        $classFrom->setTestNine(3);

        $mapper->map($classFrom, $classTo);
        $this->assertEquals($class->getTestSeven(), 1);
        $this->assertEquals($class->getTestEight(), 2);
        $this->assertEquals($class->getTestNine(), 3);
    }

    public function testCustomObjectMap()
    {
        $customTransformer = new CustomTransformer();
        $customTransformer->setTransformer(function($property) {
            switch ($property) {
                case 'testOne' : return 'test_seven';
                case 'testTwo' : return 'test_eight';
                case 'testThree': return 'test_nine';
            }
        });
        $options = new Options();
        $options->setTransformer($customTransformer);
        $mapper = new Mapper($options);

        $class =  new MyClassExample();
        $data = ['testOne' => 1, 'testTwo' => 2, 'testThree' => 3];
        $mapper->map((object)$data, $class);

        $this->assertEquals($class->getTestOne(), null);
        $this->assertEquals($class->getTestTwo(), null);
        $this->assertEquals($class->getTestThree(), null);

        $this->assertEquals($class->getTestSeven(), 1);
        $this->assertEquals($class->getTestEight(), 2);
        $this->assertEquals($class->getTestNine(), 3);

        $mapper = new Mapper($options);
        $classFrom =  new MyClassExample();
        $classTo = new MyClassExample();
        $classFrom->setTestOne(1);
        $classFrom->setTestTwo(2);
        $classFrom->setTestThree(3);

        $mapper->map($classFrom, $classTo);

        $this->assertEquals($class->getTestOne(), null);
        $this->assertEquals($class->getTestTwo(), null);
        $this->assertEquals($class->getTestThree(), null);

        $this->assertEquals($class->getTestSeven(), 1);
        $this->assertEquals($class->getTestEight(), 2);
        $this->assertEquals($class->getTestNine(), 3);
    }

    public function testObjectMapCreateProperty()
    {
        $options = new Options();
        $options->createNewProperty(true);
        $mapper = new Mapper($options);

        $class =  new MyClassExample();
        $data = ['testOne' => 1, 'testTwo' => 2, 'testNew' => 3];
        $mapper->map((object)$data, $class);

        $this->assertEquals($class->getTestOne(), 1);
        $this->assertEquals($class->getTestTwo(), 2);
        $this->assertEquals($class->testNew, 3);

        $mapper = new Mapper($options);
        $classFrom =  new MyClassExample();
        $classTo = new MyClassExample();
        $classFrom->setTestOne(1);
        $classFrom->setTestTwo(2);
        $classFrom->testNew = 3;

        $mapper->map($classFrom, $classTo);

        $this->assertEquals($class->getTestOne(), 1);
        $this->assertEquals($class->getTestTwo(), 2);
        $this->assertEquals($class->testNew, 3);
    }

    ///////////////////////////////////////////////////////////////
    public function testSimpleStringMap()
    {
        $mapper = new Mapper();
        $class =  new MyClassExample();
        $data = ['testOne' => 1, 'testTwo' => 2, 'testThree' => 3, 'testFour' => 4];

        $mapper->map(json_encode($data), $class);
        $this->assertEquals($class->getTestOne(), 1);
        $this->assertEquals($class->getTestTwo(), 2);
        $this->assertEquals($class->getTestThree(), 3);
        $this->assertFalse(property_exists($class, 'testFour'));
    }

    public function testCamelCaseStringMap()
    {
        $options = new Options();
        $options->setTransformer(new CamelCaseTransformer());

        $mapper = new Mapper($options);
        $class = new MyClassExample();
        $data = ['test_seven' => 1, 'test_eight' => 2, 'test_nine' => 3];

        $mapper->map(json_encode($data), $class);
        $this->assertEquals($class->getTestSevenCamelCase(), 1);
        $this->assertEquals($class->getTestEightCamelCase(), 2);
        $this->assertEquals($class->getTestNineCamelCase(), 3);
    }

    public function testPascalCaseStringMap()
    {

        $options = new Options();
        $options->setTransformer(new PascalCaseTransformer());
        $mapper = new Mapper($options);

        $class = new MyClassExample();
        $data = ['test_seven' => 1, 'testEight' => 2, 'TestNine' => 3];
        $mapper->map(json_encode($data), $class);

        $this->assertEquals($class->getTestSevenPascalCase(), 1);
        $this->assertEquals($class->getTestEightPascalCase(), 2);
        $this->assertEquals($class->getTestNinePascalCase(), 3);
    }

    public function testSnakeCaseStringMap()
    {
        $options = new Options();
        $options->setTransformer(new SnakeCaseTransformer());
        $mapper = new Mapper($options);

        $class =  new MyClassExample();
        $data = ['testSeven' => 1, 'testEight' => 2, 'TestNine' => 3];
        $mapper->map(json_encode($data), $class);

        $this->assertEquals($class->getTestSeven(), 1);
        $this->assertEquals($class->getTestEight(), 2);
        $this->assertEquals($class->getTestNine(), 3);
    }

    public function testCustomStringMap()
    {
        $customTransformer = new CustomTransformer();
        $customTransformer->setTransformer(function($property) {
            switch ($property) {
                case 'testOne' : return 'test_seven';
                case 'testTwo' : return 'test_eight';
                case 'testThree': return 'test_nine';
            }
        });
        $options = new Options();
        $options->setTransformer($customTransformer);
        $mapper = new Mapper($options);

        $class =  new MyClassExample();
        $data = ['testOne' => 1, 'testTwo' => 2, 'testThree' => 3];
        $mapper->map(json_encode($data), $class);

        $this->assertEquals($class->getTestOne(), null);
        $this->assertEquals($class->getTestTwo(), null);
        $this->assertEquals($class->getTestThree(), null);

        $this->assertEquals($class->getTestSeven(), 1);
        $this->assertEquals($class->getTestEight(), 2);
        $this->assertEquals($class->getTestNine(), 3);
    }

    public function testStringMapCreateProperty()
    {
        $options = new Options();
        $options->createNewProperty(true);
        $mapper = new Mapper($options);

        $class =  new MyClassExample();
        $data = ['testOne' => 1, 'testTwo' => 2, 'testNew' => 3];
        $mapper->map(json_encode($data), $class);

        $this->assertEquals($class->getTestOne(), 1);
        $this->assertEquals($class->getTestTwo(), 2);
        $this->assertEquals($class->testNew, 3);
    }
}